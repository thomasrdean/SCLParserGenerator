
-- 8211

ISO8211 DEFINITIONS ::= BEGIN

	EXPORTS PDU;

	PDU ::= SEQUENCE {
		
		a  		INTEGER (SIZE 4 BYTES),
		b		INTEGER (SIZE 1 BYTES),
		interChgLev	INTEGER (SIZE 1 BYTES),
		leaderID	INTEGER (SIZE 1 BYTES),
		q:wq
		numQuestion		INTEGER (SIZE 2 BYTES),
		numAnswer	  	INTEGER (SIZE 2 BYTES),
		numAuthority	INTEGER (SIZE 2 BYTES),
		numAdditional	INTEGER (SIZE 2 BYTES),
		question  		SET OF Query (SIZE CONSTRAINED),
		answer  		SET OF ResourceRecord (SIZE CONSTRAINED),
		authority  		SET OF ResourceRecord (SIZE CONSTRAINED),
		additional 		SET OF ResourceRecord (SIZE CONSTRAINED)
	} (ENCODED BY CUSTOM)
	<transfer>
		Callback
		Forward { CARDINALITY(question) == numQuestion }
		Forward { CARDINALITY(answer) == numAnswer }
		Forward { CARDINALITY(authority) == numAuthority }
		Forward { CARDINALITY(additional) == numAdditional }
	</transfer>

	Query ::= SEQUENCE {
		name	Domain (SIZE DEFINED),
		type	INTEGER (SIZE 2 BYTES),
		class	INTEGER (SIZE 2 BYTES)
	}

	ResourceRecord ::= (
		ResourceRecordA |
		ResourceRecordAAAA |
		ResourceRecordCNAME |
		ResourceRecordSOA |
		ResourceRecordOPT |
		ResourceRecordNS |
		ResourceRecordTXT |
		ResourceRecordMX |
		ResourceRecordPTR  
	)
	
	ResourceRecordA ::= SEQUENCE {
		name		Domain (SIZE DEFINED),
		type		INTEGER (SIZE 2 BYTES),
		class		INTEGER (SIZE 2 BYTES),
		timeToLive	INTEGER (SIZE 4 BYTES),
		dataLength	INTEGER (SIZE 2 BYTES),
		address		OCTET STRING (SIZE 4 BYTES) -- IPv4
	}
	<transfer>
		Back { type == 1 } -- code for A
	</transfer>

	ResourceRecordAAAA ::= SEQUENCE {
		name		Domain (SIZE DEFINED),
		type		INTEGER (SIZE 2 BYTES),
		class		INTEGER (SIZE 2 BYTES),
		timeToLive	INTEGER (SIZE 4 BYTES),
		dataLength	INTEGER (SIZE 2 BYTES),
		address		OCTET STRING (SIZE 16 BYTES) -- IPv6
	}
	<transfer>
		Back { type == 28 } -- code for AAAA
	</transfer>

	ResourceRecordCNAME ::= SEQUENCE {
		name		Domain (SIZE DEFINED),
		type		INTEGER (SIZE 2 BYTES),
		class		INTEGER (SIZE 2 BYTES),
		timeToLive	INTEGER (SIZE 4 BYTES),
		dataLength	INTEGER (SIZE 2 BYTES),
		cname		Domain (SIZE DEFINED)
	}
	<transfer>
		Back { type == 5 } -- code for CNAME
	</transfer>

	ResourceRecordSOA ::= SEQUENCE {
		name			Domain (SIZE DEFINED),
		type			INTEGER (SIZE 2 BYTES),
		class			INTEGER (SIZE 2 BYTES),
		timeToLive		INTEGER (SIZE 4 BYTES),
		dataLength		INTEGER (SIZE 2 BYTES),
		primaryNameServer	Domain (SIZE DEFINED),
		reponsibleAuthority	Domain (SIZE DEFINED),
		serialNumber		INTEGER (SIZE 4 BYTES),
		refreshInterval		INTEGER (SIZE 4 BYTES),
		retryInterval		INTEGER (SIZE 4 BYTES),
		expireLimit		INTEGER (SIZE 4 BYTES),
		minimumTTL		INTEGER (SIZE 4 BYTES)
	}
	<transfer>
		Back { type == 6 } -- code for SOA
	</transfer>

	ResourceRecordOPT ::= SEQUENCE {
		name			Domain (SIZE DEFINED),
		type			INTEGER (SIZE 2 BYTES),
		udpPayloadSize		INTEGER (SIZE 2 BYTES),
		higherBitsInExtdRcode	INTEGER (SIZE 1 BYTES),
		EDNS0Version		INTEGER (SIZE 1 BYTES),
		z			INTEGER (SIZE 2 BYTES),
		dataLength		INTEGER (SIZE 2 BYTES)
	}
	<transfer>
		Back { type == 41 } -- code for OPT
	</transfer>

	ResourceRecordNS ::= SEQUENCE {
		name		Domain (SIZE DEFINED),
		type		INTEGER (SIZE 2 BYTES),
		class		INTEGER (SIZE 2 BYTES),
		timeToLive	INTEGER (SIZE 4 BYTES),
		dataLength	INTEGER (SIZE 2 BYTES),
		nameServer	Domain (SIZE DEFINED)
	}
	<transfer>
		Back { type == 2 } -- code for NS
	</transfer>

-- should factor  text in to legnth + data, but need more docs.
	ResourceRecordTXT ::= SEQUENCE {
		name		Domain (SIZE DEFINED),
		type		INTEGER (SIZE 2 BYTES),
		class		INTEGER (SIZE 2 BYTES),
		timeToLive	INTEGER (SIZE 4 BYTES),
		dataLength	INTEGER (SIZE 2 BYTES),
		text		OCTET STRING (SIZE CONSTRAINED)
	}
	<transfer>
		Back { type == 16 } -- code for TXT
		Forward { LENGTH(text) == dataLength }
	</transfer>

	Domain ::= SEQUENCE {
		words SET OF Word (SIZE CONSTRAINED)
	}
	<transfer>
		Forward { TERMINATE(words) == EndWord }
	</transfer>

-- MX - should have two constraints apply to domain, one internal
-- which is based on word structure, the second is that the length
-- of preference and domain is given by data length
	ResourceRecordMX ::= SEQUENCE {
		name		Domain (SIZE DEFINED),
		type		INTEGER (SIZE 2 BYTES),
		class		INTEGER (SIZE 2 BYTES),
		timeToLive	INTEGER (SIZE 4 BYTES),
		dataLength	INTEGER (SIZE 2 BYTES),
		prefernece	INTEGER (SIZE 2 BYTES),
		mailExchange	Domain (SIZE DEFINED)
	}
	<transfer>
		Back { type == 15 } -- code for MX
	</transfer>

	ResourceRecordPTR ::= SEQUENCE {
		name		Domain (SIZE DEFINED),
		type		INTEGER (SIZE 2 BYTES),
		class		INTEGER (SIZE 2 BYTES),
		timeToLive	INTEGER (SIZE 4 BYTES),
		dataLength	INTEGER (SIZE 2 BYTES),
		domainName	Domain (SIZE DEFINED)
	}
	<transfer>
		Back { type == 12 } -- code for PTR
	</transfer>

	Word ::= (InlineWord | EndWord)
	EndWord ::= (ReferenceWord | NullWord)

	InlineWord ::= SEQUENCE {
		length	INTEGER (SIZE 1 BYTES) SAVEPOS,
		letters	OCTET STRING (SIZE CONSTRAINED)
	}
	<transfer>
		Forward { LENGTH(letters) == length }
		-- Note: these constraints may be incomplete, but they seem to work well
		Back { length != 0 }
		Back { length != 192 } -- 192 is c0
	</transfer>

	ReferenceWord ::= SEQUENCE {
		header INTEGER (SIZE 1 BYTES),
		reference INTEGER (SIZE 1 BYTES)
	}
	<transfer>
		Back { header == 192 } -- 192 is c0
	</transfer>

	NullWord ::= SEQUENCE {
		header INTEGER (SIZE 1 BYTES)
	}
	<transfer>
		Back { header == 0 }
	</transfer>

END

% TXL 1988/1990 hybrid of the Abstract Syntax Notation One (ASN.1) Grammar:1990.
% Sylvain Marquis, Royal Military College of Canada 2004.
% References: [stal96] figure b.2 p.431 BNF grammar
%	      [dub00] O. Dubuison ASN.1 Communications Between Heterogenous Systems MK 2000
%Modifications:
%29 Mar 04	BIT STRING type is corrected to allow size constraint expressions on both type of definitions
%01 Apr 04	constr_reference_term is added a notation which allows referencing of variables for sets and sequences
%26 Apr 04	The current version of the grammar is snapshotted.  Recent advances in SCL will require modification at the level of the grammar.
%3 May 04 	Modified the ASN.1 accepted tokens in a set, for referencing purpose.  The use of components of
%		implies the use of the labels of the inherited constructed type.  i
%14 May 04	Further Adjustment made to accomodate all the ASN.1 types supported by Protocol Tester
%24 May 04	Changed imported_or_exported_item to reference in define of imported_or_exported_list
%29 May 04	Specialized the type of legal element types for the types sequence_of_type and set_of_type 
%11 Jun 04	Changed size_marker_statement variant for 'ALLIGNED 'ON.  More generically, it only accepts
%		references as size reference now.
%14 Jun 04	Removed define constant_expression (is an expression).  Not used
%16 Jun 04	local_assignment_statement can only take additive_expression on its RValue
%2  Juil 04	construction_parameters have been generalized to accomodate referenced_element
%
%xx Nov 14	Complete redesign based on IDS project.

%March 2021	Merged changes that were put in individual TXL files into main grammar where they should be (TD)
%		- removed parts of the grammar that aren't used and aren't implemented by using the comment %- at
%		  the beginning of th eline.
%		- decided on C representation of Hex numbers

#pragma -width 160 -idchars '-$'

compounds
       ::= ... != == ... <= >=  </ || &&
end compounds

comments
        -- 
        --/ /--
end comments
 
keys
    'BOOLEAN 'BEGIN 'BIG 'INTEGER 'END 'BIT 'DEFINITIONS 'STRING 'EXPLICIT
    'OCTET 'NULL 'EXPORTS 'SEQUENCE 'IMPORTS 'OF 'REAL 'SET 'INCLUDES
    'IMPLICIT 'ANY 'SIZE 'EXTERNAL 'FROM 'OBJECT 'WITH 'IDENTIFIER 'COMPONENT
    'OPTIONAL 'PRESENT 'DEFAULT 'ABSENT 'COMPONENTS 'DEFINED 'UNIVERSAL 'BY
    'APPLICATION 'PLUS-INFINITY 'PRIVATE 'MINUS-INFINITY 'TRUE 'TAGS 'FALSE
    'AUTOMATIC 'EXTENSIBILITY 'IMPLIED 'ENCODED 'CONTAINING 'VisibleString 'UTCTime  
    'STRING 'GeneralizedTime 'IA5String
end keys

tokens
    binnumber "'[01]*'B" %the rules to deal with the right value of range_constraint
			 %are affected by the name of this non-t.

    hex  "0x[\dABCDEFabcdef]+" %the rules to deal with the right value of range_constraint
    				     %are affected by the name of this non-t.

    number "\d+"    %the rules to deal with the right value of range_constraint are
		    %affected by the name of this non-t.

    stringlit "\"[(\\\c)#\"(\"\")]*\"" %the rules to deal with the right value
				       % of range_constraint are affected by the name of this non-t.
       
end tokens

define program
    [repeat module_definition]
end define


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  MODULE DEFINITIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

define module_definition
    [id] 'DEFINITIONS  ::= 'BEGIN				[NL][IN]
	[opt module_body]					[NL][EX]
    'END 							[NL]
end define

define module_body
    [opt export_block]
    [opt import_block]
    [repeat rule_definition]
end define

define export_block
    'EXPORTS [list type_reference] ';				[NL]
end define

define import_block
    'IMPORTS [IN][list import_list+] ';				[EX][NL]
end define

define import_list
								[NL]
    [list decl] 'FROM [id]
end define

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ASN Grammar top level rules 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

define rule_definition
      [type_rule_definition]
    | [type_decision_definition]
end define

define type_rule_definition
    [type_decl] '::= [type] [opt scl_additions]			[NL]
end define

define type_decision_definition
    [type_decl] '::= [type_decision] [opt scl_additions]	[NL]
end define

define type_decision
	'( [type_reference] [repeat alternative_decision]')
end define         

define alternative_decision
	'| [type_reference] 
end define

define type_decl
    [decl]
end define

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ASN type rules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

define type
     [builtin_type] [size_constraint] [repeat type_attribute]
   | [user_defined_type] [opt size_constraint] [repeat type_attribute]
end define

%========================
% ASN.1
% supported built-in types
%========================

define builtin_type
     [boolean_type]
   | [integer_type]
   | [real_type]
   | [octet_string_type]
   | [UTCTime_type]
   | [GENTime_type]
   | [character_string_type] 	% VisibleString/IA5String
end define

define boolean_type
    'BOOLEAN
end define

define integer_type
    'INTEGER 
end define

define real_type
    'REAL
end define

define octet_string_type
    'OCTET 'STRING
end define

define UTCTime_type
    'UTCTime	
end define

define GENTime_type
    'GeneralizedTime	
end define

define	character_string_type
     'VisibleString
   | 'IA5String
end define

%========================
% ASN.1
% User defined types
%========================

define user_defined_type
     [structured_type]
   | [set_or_seq_of_type]
   | [type_reference]
end define

% if we put set_type back in it goes here...
define structured_type
     [sequence_type]
end define

define sequence_type
    'SEQUENCE  [opt size_constraint]  '{		[IN]
	[list struct_element] [opt ',]			[NL][EX]
    '}	
end define

% TODO should merge for C code generation
define set_or_seq_of_type
     [sequence_of_type]
   | [set_of_type]
end define

% doesn't allow SEQ of builtin
define sequence_of_type
    'SEQUENCE 'OF [type_reference]
end define

% doesn't allow SET of builtin
define set_of_type
    'SET 'OF [type_reference]
end define

%%%%%%
% this definition is a super set. It allows nested SEQUENCES
% - not supported by code genertator
% - program rules to check and report an error
%%%%%%%

define struct_element
							[NL]
    [element_decl] [type]
end define

define element_decl
    [decl]
end define

%%%%%%%%%%%%%%%%%%%%%%%%
% Size and attributes
%%%%%%%%%%%%%%%%%%%%%%%%

define size_constraint
    '( SIZE [size_constr_argument] ')
end define

define size_constr_argument
    [constr_range_value] [size_unit]
  | 'DER
  | 'DEFINED
  | 'CONSTRAINED
end define

define constr_range_value
    [constr_range_number]
end define

% TODO - signed number not implemented
define constr_range_number
    [number]
  %| [signed_number] % note negative size doesn't make any sense
end define

define size_unit
	'BITS
   |	'BYTES
end define

define type_attribute
    [endian] 
  | [slack]
  | [align]
  | [optional]
  | [save_position]
end define

define endian
    'BIGENDIAN
  | 'LITTLEENDIAN
end define

define slack
    'SLACK [opt MODNUM]
end define

define MODNUM
    MOD [number]
end define

% TODO - not implemented yet.
define align
    'ALIGN [opt number]
end define

define save_position
   SAVEPOS
end define

% Note
% only allowed on elements

define optional
  OPTIONAL
end define

%%%%%%%%%%%%%%%%%%%%%%%%
%% SCL additions
%%%%%%%%%%%%%%%%%%%%%%%%

define scl_additions
    [opt encoding_grammar_indicator]
    [opt transfer_rules_block]
    [opt constraints_block] 			[NL]
end define

% DER not implemented yet.
define encoding_grammar_indicator
	'('ENCODED 'BY 'DER ')
   |	'('ENCODED 'BY 'CUSTOM ')
end define


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  CONSTRAINT BLOCK DEFINITIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%TODO: review of all below
define constraints_block
						[NL] 
    '<constraints>				[NL][IN]
	[constr_body]				[EX]
    '</constraints>				[NL]
end define

define constr_body
    [repeat constr_statement]
end define

%TODO add other constraint mecanisms if necessry
define constr_statement
    [range_constraint]				[NL]
  | [ordering_constraint]			[NL]
end define

define ordering_constraint
  'ORDER'( [referenced_element] ') '= [ordering_constraint_RSide]
end define

define ordering_constraint_RSide
    [order_direction] [referenced_element]
  | [order_direction] '( [repeat and_referenced_element+]')
end define

define order_direction
    'ASCENDING 'USING
  | 'DESCENDING 'USING
end define

define and_referenced_element
     [referenced_element]
   | [and_referenced_element] '& [referenced_element]
end define

define range_constraint
	[range_constraint_left_side] [equality_op] [range_constraint_right_side]
end define

% T.D Legacy, not sure about theses...
define range_constraint_left_side
    'VALUE '( [referenced_element] ')
  | 'VALUE '( 'CARDINALITY '( [referenced_element] ') ')
  | 'VALUE '( 'LENGTH '( [referenced_element] ') ')
end define

define range_constraint_right_side
    [opt boundary_inclusion]
    [value_alternatives]
    [opt boundary_inclusion]
%******* add by songtao for state_based protocol *******	
  | 'VALUE '( [referenced_element] ')
  | [ function_call]
  | 'EXTERNAL '( [id] ')
end define

define function_call
    [function_name] '( [repeat function_args] ')	
end define

define function_name
    [id]  
end define

define function_args 
    [id] 
   |'VALUE '( [referenced_element] ')
   |'EXTERNAL '( [id] ')
end define

 %********************************

define boundary_inclusion
    'INCLUDED
  | 'EXCLUDED
end define

define value_alternatives
    [range_constraint_r_side_values] [repeat or_value_alternative]
  | [discrete_value_interval] [repeat or_value_alternative]
end define

define or_value_alternative
    '| [range_constraint_r_side_values]
  | '| [discrete_value_interval]
end define

define discrete_value_interval
    [range_constraint_r_side_values] '.. [range_constraint_r_side_values]
end define

define range_constraint_r_side_values
     [number] | [signed_number] | PDULENGTH | [stringlit] | [referenced_element] | 'TRUE | 'FALSE | [hex]
end define


%%%%%%%%%%%%%%%%%%%%%%%DECODING TRANSFER RULES BLOCK SYNTAX%%%%%%%%%%%%

define transfer_rules_block
							[NL]
    '<transfer>						[IN][NL]
	[transfer_statement_body]			[EX]
    '</transfer>
end define

define transfer_statement_body
    [repeat transfer_statement]
end define

define transfer_statement
     [back_block]					[NL]
   | [forward_block]					[NL]
   | [all_bytes]
   | [callback_statement]
end define

define all_bytes
   'All 'Bytes 'Used					[NL]
end define

% TODO move annotation to overrides, not part of input
define callback_statement
   'Callback [opt callback_annotation]			[NL]
end define

define back_block
    'Back '{ [or_expression]'} 
end define

define forward_block
    'Forward '{ [construction_parameter]'} 
end define

% TODO move annotation to overrides, not part of input
define callback_annotation
     [id] [id]  % New callback annotated with the original type (eg full_rtps)
   | '@ [id] [id]% Original callback annotated with what is being optimized
   | '^ [id] [id]
   | 'Final
end define

define components_of
    'COMPONENTS 'OF
end define

%modified [expression] became additive_expression
%[identifier] became referenced_element	
define construction_parameter
    CARDINALITY '( [referenced_element] ') '== [additive_expression]
  | LENGTH '( [referenced_element] ') '== [additive_expression] [opt size_unit]
  | EXISTS '( [referenced_element] ') '== [relational_expression]
  | TERMINATE '( [referenced_element] ') '== [referenced_element]
  | END '( [referenced_element] ')
  | [immediate_endian_change]
end define

define immediate_endian_change
    ENDIANNESS '== [relational_expression]
end define

% originally from Java.Grm from www.txl.ca, but has been modified to be more C like.

define expression
    [local_assignment_expression]
end define

define local_assignment_expression
    [or_expression]
end define

% A || B || C
define or_expression
    [and_expression][repeat or_and_expression]
end define

define or_and_expression
    '|| [and_expression]
end define

% A && B && C
define and_expression
    [equality_expression][repeat and_equality_expression]
end define

define and_equality_expression
    '&& [equality_expression]
end define

% A == B  A != B - only one allowed
define equality_expression
    [relational_expression] [opt equality_op_relational_expression] 
end define

define equality_op_relational_expression
    [equality_op] [relational_expression]
end define

define equality_op
    '== | '!=
end define

% A < B - only allow one - no A < B < C
define relational_expression
    [additive_expression][opt relational_op_additive_expression]
end define

define relational_op
    '<  | '> | '<= | '>=
end define

define relational_op_additive_expression
    [relational_op][additive_expression]
end define

% A + B + C
define additive_expression
    [multiplicative_expression] [repeat add_op_multiplicative_expression]
end define

define add_op_multiplicative_expression
    [add_op] [multiplicative_expression]
end define

define add_op
    '+ | '- 
end define

% A * B
define multiplicative_expression
    [bit_and_expression] [repeat mult_op_bit_and_expression]
end define

define mult_op_bit_and_expression
    [mult_op] [bit_and_expression]
end define

define mult_op
    '* | '/ | '% 
end define

% A | B TODO - no precedence?
define bit_and_expression
    [unary_expression] [repeat bit_and_unary_expression]
end define

define bit_and_unary_expression
     [SPOFF] '& [SPON] [or_expression]
   | [SPOFF] '| [SPON] [or_expression]
end define

define unary_expression
   	[primary]
   |	[size_of_expn]
   |    [add_op][unary_expression] %T.D. June 3, 2015
end define

%TODO: start back here after having defined a 'reference'

define primary
     'PDULENGTH
   | 'PDUREMAINING
   | 'SRCPORT
   | 'DSTPORT
   | 'ENDIANNESS
   | [value_expression]
   | [cardinality_expression]
   | [length_expression]
   | [exists_expression]
   | [terminate_expression]
   | [end_expression]
   | [global_expression]
   | [pos_expression]
   | [referenced_element]
   | [literal_value]
   |   '( [expression] ') [opt cond_value]
end define

define literal_value
      [number]
   |  [hex]
   |  [charlit]
end define

define cond_value
    '?  [additive_expression] ': [additive_expression]
end define

%%%%%%%%%%%%%
% not implemented in resturcuted parser yet.
define value_expression
   'VALUE '( [referenced_element] ')
end define

define cardinality_expression
   'CARDINALITY '( [referenced_element] ')
end define

define length_expression
   [length_functor] '( [referenced_element] ')
end define

define length_functor
    'LENGTH | 'BITLENGTH
end define

define exists_expression
  'EXISTS '( [referenced_element] ')
end define

define terminate_expression
  'TERMINATE '( [referenced_element] ')
end define

define end_expression
  'END '( [referenced_element] ')
end define

define global_expression
  'GLOBAL '( [id] ')
end define
% end of not implemented in restructured parser
%%%%%%%%%%%%%

define pos_expression
  'POS '( [referenced_element] ')
end define

% this should be length.
define size_of_expn
       'SIZEOF '( [referenced_element] ')
end define

% reference to an element in the grammar
% in a constraint a.b.c in a structure
% could also possibly be a reference to a
% imported type  Mod.Typename (but unlikely)
% only the structure one is implemented right now.
% we don't have methods so we donn't have function
% calls. We might have an index in a sequence, which
% has not been used in anything. It woudl be 

% the chain is turned into a renamed chain, no nesteing.
% So Header.protoName in the PING type of RTPS becomes
%    [Header_PING_RTPS.protoName_HEADER_RTPS ^ Header.protoName ]

define referenced_element
    [reference] [repeat dotReference]
 | '[ [referenced_element]  ^ [referenced_element] ']
end define

define dotReference
   '. [index_or_reference]
end define

define index_or_reference
    [reference]
  |  'indexAt '( [expression] ')
end define


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Common definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

define signed_number
    [SPOFF] '- [number] [SPON]
end define

define asn_stringlit
    [repeat stringlit] [NL]
end define

define decl
    [id]
  | '[ [id] '^ [id] ']
end define

% TODO parent is idea from katai struct, we sould figure out a way to
% implement it.
define reference
   [id] | 'PARENT
end define

define type_reference
    [id] [opt dotID]
end define

define dotID
   '. [id]
end define
